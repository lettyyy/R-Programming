makeCacheMatrix <- function(x = matrix()) {#
	inv <- Null#
	set <- function(y) {#
			x <<- y#
			inv <<- Null#
	}#
	get <- function() x#
	setInverse <- function(inverse) #
	inv <<- inverse#
	getInverse <- function() #
	inv#
	list(set = set,#
		get = get,#
		setInverse = setInverse,#
		getInverse = getInverse)#
}
cacheSolve <- function(x, ...) {#
        inv <- x$getInverse()#
		if (!is.null(inv)) {#
				message("getting data from cache")#
				return(inv)#
		}#
		mat <- x$get()#
		inv <- solve(mat,...)#
		x$setInverse(inv)#
		inv#
}
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))#
 my_matrix$get()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
makeCacheMatrix <- function(x = matrix()) {#
	inv <- Null#
	set <- function(y) {#
			x <<- y#
			inv <<- Null#
	}#
	get <- function() x#
	setInverse <- function(inverse) inv <<- inverse#
	getInverse <- function() inv#
	list(set = set,#
		get = get,#
		setInverse = setInverse,#
		getInverse = getInverse)#
}#
#
## This function computes the inverse of the "matrix" created by#
## makeCacheMatrix above, and if the inverse has already been #
## calculated, then the inverse should will be retrieved from the #
## cache, instead of being calculated again.#
#
cacheSolve <- function(x, ...) {#
        inv <- x$getInverse()#
		if (!is.null(inv)) {#
				message("getting data from cache")#
				return(inv)#
		}#
		mat <- x$get()#
		inv <- solve(mat,...)#
		x$setInverse(inv)#
		inv#
}
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
makeCacheMatrix <- function(x = matrix()) {#
	inv <- NULL#
	set <- function(y) {#
			x <<- y#
			inv <<- NULL#
	}#
	get <- function() x#
	setInverse <- function(inverse) inv <<- inverse#
	getInverse <- function() inv#
	list(set = set,#
		get = get,#
		setInverse = setInverse,#
		getInverse = getInverse)#
}#
#
## This function computes the inverse of the "matrix" created by#
## makeCacheMatrix above, and if the inverse has already been #
## calculated, then the inverse should will be retrieved from the #
## cache, instead of being calculated again.#
#
cacheSolve <- function(x, ...) {#
        inv <- x$getInverse()#
		if (!is.null(inv)) {#
				message("getting data from cache")#
				return(inv)#
		}#
		mat <- x$get()#
		inv <- solve(mat,...)#
		x$setInverse(inv)#
		inv#
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
